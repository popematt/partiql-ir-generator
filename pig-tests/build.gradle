/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */

// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html#header
    id 'java-library'
    // https://docs.gradle.org/5.0/userguide/publishing_maven.html#header
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
    id 'pig-gradle-plugin'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// remove after pig-example is created
def PIG_OUTPUT_DIR = file("./src/org/partiql/pig/tests/generated/").absolutePath

pig {
    target = "kotlin"
    namespace = "org.partiql.pig.tests.generated"
    // remove after pig-example is created
    outputDir = PIG_OUTPUT_DIR
}

// remove after https://github.com/partiql/partiql-ir-generator/pull/128
sourceSets {
    main {
        pig {
            srcDir "type-domains"
        }
    }
}

dependencies {
    // compile-time dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation project(':pig-runtime')

    // test-time dependencies
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

// remove once pig-example is created
tasks.register('pigClean', Delete) {
    group 'pig'
    delete fileTree(PIG_OUTPUT_DIR).matching {
        include "*.generated.kt"
    }
}

// remove once pig-example is created
ktlint {
    filter {
        exclude("**/*.generated.kt")
    }
}

test {
    useJUnitPlatform()
}
